@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@implements IDisposable

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudText Typo="Typo.h5" Class="ml-3">Job Application Tracker</MudText>
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <MudText Typo="Typo.body1" Class="mr-4">Hej, @context.User.Identity?.Name</MudText>
                <MudButton Href="Account/Manage" Color="Color.Inherit">Konto</MudButton>
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <MudButton ButtonType="ButtonType.Submit" Color="Color.Inherit">Logga ut</MudButton>
                </form>
            </Authorized>
            <NotAuthorized>
                <MudButton Href="Account/Register" Color="Color.Inherit">Registrera</MudButton>
                <MudButton Href="Account/Login" Color="Color.Inherit">Logga in</MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>

    <MudDrawer @bind-Open="drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <MudNavMenu>
            <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Hem</MudNavLink>
            <AuthorizeView>
                <MudNavLink Href="/jobapplications" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Work">Mina Ansökningar</MudNavLink>
            </AuthorizeView>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool drawerOpen = true;
    private string? currentUrl;

    private void ToggleDrawer()
    {
        drawerOpen = !drawerOpen;
    }

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}}