@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using JobApplicationTrackerV2.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<!DOCTYPE html>
<html>
<head>
    <title>Logga in</title>
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
</head>
<body>
    <div style="max-width: 400px; margin: 100px auto; padding: 20px;">
        <h2>Logga in</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div style="color: red; margin-bottom: 10px;">@errorMessage</div>
        }

        <form method="post" @onsubmit="LoginUser" @formname="login">
            <AntiforgeryToken />

            <div style="margin-bottom: 15px;">
                <label>E-post:</label><br />
                <input type="email" name="Input.Email" @bind="Input.Email" required style="width: 100%; padding: 8px;" />
            </div>

            <div style="margin-bottom: 15px;">
                <label>Lösenord:</label><br />
                <input type="password" name="Input.Password" @bind="Input.Password" required style="width: 100%; padding: 8px;" />
            </div>

            <div style="margin-bottom: 15px;">
                <label>
                    <input type="checkbox" name="Input.RememberMe" @bind="Input.RememberMe" />
                    Kom ihåg mig
                </label>
            </div>

            <button type="submit" style="width: 100%; padding: 10px; background: #0066cc; color: white; border: none; cursor: pointer;">
                Logga in
            </button>

            <div style="margin-top: 15px;">
                <a href="Account/Register">Registrera ny användare</a>
            </div>
        </form>
    </div>
</body>
</html>

@code {
    private string? errorMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            NavigationManager.NavigateTo(ReturnUrl ?? "/", true);
        }
        else
        {
            errorMessage = "Ogiltigt inloggningsförsök.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }
}